// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

// The following is brought in by the endianness component, which all
// applications must include
#include "sl_endianness.h"

#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG 1

// Default values for the attributes longer than a pointer, in a form of a
// binary blob. All attribute values with size greater than 2 bytes. Excluding 0
// values and externally saved values. Separate block is generated for
// big-endian and little-endian cases.
#define GENERATED_DEFAULTS_COUNT (0)
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
}
#else //!BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
}
#endif


// This is an array of EmberAfAttributeMinMaxValue structures.
#define GENERATED_MIN_MAX_DEFAULT_COUNT (0)
#define GENERATED_MIN_MAX_DEFAULTS { \
}

#define GENERATED_ATTRIBUTE_COUNT (18)
// This is an array of EmberAfAttributeMetadata structures.
#define GENERATED_ATTRIBUTES { \
  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT| ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)3  } }, /* 0 Cluster: Basic, Attribute: cluster revision, Side: client*/ \
	  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x08  } }, /* 1 Cluster: Basic, Attribute: ZCL version, Side: server*/ \
	  { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 2 Cluster: Basic, Attribute: power source, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)3  } }, /* 3 Cluster: Basic, Attribute: cluster revision, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 4 Cluster: Identify, Attribute: cluster revision, Side: client*/ \
	  { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000  } }, /* 5 Cluster: Identify, Attribute: identify time, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)2  } }, /* 6 Cluster: Identify, Attribute: cluster revision, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 7 Cluster: Groups, Attribute: cluster revision, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 8 Cluster: On/off, Attribute: cluster revision, Side: client*/ \
	  { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 9 Cluster: On/off, Attribute: on/off, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)2  } }, /* 10 Cluster: On/off, Attribute: cluster revision, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 11 Cluster: Level Control, Attribute: cluster revision, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)4  } }, /* 12 Cluster: Over the Air Bootloading, Attribute: cluster revision, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 13 Cluster: Poll Control, Attribute: cluster revision, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 14 Cluster: Door Lock, Attribute: cluster revision, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 15 Cluster: Thermostat, Attribute: cluster revision, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 16 Cluster: Color Control, Attribute: cluster revision, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } } /* 17 Cluster: Occupancy Sensing, Attribute: cluster revision, Side: client*/ \
	}

#define GENERATED_CLUSTER_COUNT (14)
// This is an array of EmberAfCluster structures.
#define GENERATED_CLUSTERS { \
  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 0, Endpoint Id: 1, Cluster: Basic, Side: client*/ \
  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[1]), 3, 4, CLUSTER_MASK_SERVER, NULL }, /* 1, Endpoint Id: 1, Cluster: Basic, Side: server*/ \
  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[4]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 2, Endpoint Id: 1, Cluster: Identify, Side: client*/ \
  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 2, 4, CLUSTER_MASK_SERVER, NULL }, /* 3, Endpoint Id: 1, Cluster: Identify, Side: server*/ \
  { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[7]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 4, Endpoint Id: 1, Cluster: Groups, Side: client*/ \
  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 5, Endpoint Id: 1, Cluster: On/off, Side: client*/ \
  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[9]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 6, Endpoint Id: 1, Cluster: On/off, Side: server*/ \
  { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[11]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 7, Endpoint Id: 1, Cluster: Level Control, Side: client*/ \
  { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[12]), 1, 2, CLUSTER_MASK_SERVER, NULL }, /* 8, Endpoint Id: 1, Cluster: Over the Air Bootloading, Side: server*/ \
  { 0x0020, (EmberAfAttributeMetadata*)&(generatedAttributes[13]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 9, Endpoint Id: 1, Cluster: Poll Control, Side: client*/ \
  { 0x0101, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 10, Endpoint Id: 1, Cluster: Door Lock, Side: client*/ \
  { 0x0201, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 11, Endpoint Id: 1, Cluster: Thermostat, Side: client*/ \
  { 0x0300, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 12, Endpoint Id: 1, Cluster: Color Control, Side: client*/ \
  { 0x0406, (EmberAfAttributeMetadata*)&(generatedAttributes[17]), 1, 2, CLUSTER_MASK_CLIENT, NULL } /* 13, Endpoint Id: 1, Cluster: Occupancy Sensing, Side: client*/ \
}

#define GENERATED_ENDPOINT_TYPE_COUNT (1)
// This is an array of EmberAfEndpointType structures.
#define GENERATED_ENDPOINT_TYPES { \
  { ((EmberAfCluster*)&(generatedClusters[0])), 14, 33 }, \
}

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (2)

// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (6)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE (33)

// Number of fixed endpoints
#define FIXED_ENDPOINT_COUNT (1)

// Array of endpoints that are supported, the data inside the array is the
// endpoint number.
#define FIXED_ENDPOINT_ARRAY { \
  1 \
}

// Array of profile ids
#define FIXED_PROFILE_IDS { \
  260 \
}

// Array of device ids
#define FIXED_DEVICE_IDS { \
  80 \
}

// Array of device versions
#define FIXED_DEVICE_VERSIONS { \
  1 \
}

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { \
  0 \
}

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { \
  0 \
}



// This is an array of EmberAfManufacturerCodeEntry structures for clusters.
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_CLUSTER_MANUFACTURER_CODES { \
  { 0x00, 0x00 }  \
}

// This is an array of EmberAfManufacturerCodeEntry structures for attributes.
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES { \
  { 0x00, 0x00 } \
}

// Array of EmberAfPluginReportingEntry structures.
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (1)
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS { \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: On/off, Attribute: on/off */ \
}

#define EMBER_AF_MANUFACTURER_CODE 0x1049
#define EMBER_AF_DEFAULT_RESPONSE_POLICY_CONDITIONAL

// All Enabled Clusters
#define ZCL_USING_BASIC_CLUSTER_CLIENT
#define ZCL_USING_BASIC_CLUSTER_SERVER
#define ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
#define ZCL_USING_GROUPS_CLUSTER_CLIENT
#define ZCL_USING_IDENTIFY_CLUSTER_CLIENT
#define ZCL_USING_IDENTIFY_CLUSTER_SERVER
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_OCCUPANCY_SENSING_CLUSTER_CLIENT
#define ZCL_USING_ON_OFF_CLUSTER_CLIENT
#define ZCL_USING_ON_OFF_CLUSTER_SERVER
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_SERVER
#define ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_THERMOSTAT_CLUSTER_CLIENT

// Cluster Counts
#define EMBER_AF_BASIC_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_BASIC_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_COLOR_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_DOOR_LOCK_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_GROUPS_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_IDENTIFY_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_IDENTIFY_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_LEVEL_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_OCCUPANCY_SENSING_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_ON_OFF_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_ON_OFF_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_OTA_BOOTLOAD_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_POLL_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_THERMOSTAT_CLUSTER_CLIENT_ENDPOINT_COUNT (1)

// All Enabled Cluster Attributes
#define ZCL_USING_BASIC_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_POWER_SOURCE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_IDENTIFY_TIME_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_GROUPS_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_ON_OFF_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_POLL_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_DOOR_LOCK_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_THERMOSTAT_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_OCCUPANCY_SENSING_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE



#endif // SILABS_AF_ENDPOINT_CONFIG