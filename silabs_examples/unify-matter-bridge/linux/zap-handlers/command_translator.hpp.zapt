/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @defgroup command_translator
 * @brief cluster command translator for matter interface
 *
 * Translate cluster commands from the matter protocol to unify
 * dotdot data model.
 *
 * @{
 */

#ifndef COMMAND_TRANSLATOR_HPP
#define COMMAND_TRANSLATOR_HPP

#pragma once
#include "command_translator_interface.hpp"

namespace unify::matter_bridge
{

{{#zcl_clusters}}
{{#if (unifySupportedCluster code)}}
class {{asUpperCamelCase label}}ClusterCommandHandler : public command_translator_interface
{
  public:
  {{asUpperCamelCase label}}ClusterCommandHandler(
    const matter_node_state_monitor &node_state_monitor, UnifyMqtt &unify_mqtt, group_translator &group_translator_m) :
    command_translator_interface(node_state_monitor,
                                 chip::app::Clusters::{{asUpperCamelCase label}}::Id,"{{unifyClusterName code}}", unify_mqtt, group_translator_m)
  {}
  void InvokeCommand(chip::app::CommandHandlerInterface::HandlerContext
                    &HandlerContext) override;
  
  
  {{#zcl_commands_source_client}}
  {{#if (unifySupportedClusterCommand parent.code code) }}
  
  {{else}}
  ///
  /// The command {{label}} is not defined in UCL and must be manually handled
  ///
  virtual void Invoke_{{label}}( CommandHandlerInterface::HandlerContext &ctxt, chip::app::Clusters::{{asUpperCamelCase parent.label}}::Commands::{{asUpperCamelCase label}}::DecodableType data)
  {{#isOptional}}
   {
    ctxt.mCommandHandler.AddStatus(ctxt.mRequestPath, chip::Protocols::InteractionModel::Status::UnsupportedCommand);
    ctxt.SetCommandHandled();
  };
  {{else}}
  = 0;
  {{/isOptional}}
  {{/if}}
  {{/zcl_commands_source_client}}


  virtual CHIP_ERROR EnumerateAcceptedCommands(const chip::app::ConcreteClusterPath & cluster, CommandIdCallback callback, void * context) override
  {
    const chip::CommandId all_commands[] = { {{#zcl_commands_source_client}}{{code}},{{/zcl_commands_source_client}} };
    for (const auto & cmd :  all_commands )
    {
        if (callback(cmd, context) != chip::Loop::Continue)
        {
            break;
        }
    }

    return CHIP_NO_ERROR;
  }

};
{{/if}}
{{/zcl_clusters}}

}  // namespace unify::matter_bridge

#endif  //COMMAND_TRANSLATOR_HPP
/** @} end command_translator */
