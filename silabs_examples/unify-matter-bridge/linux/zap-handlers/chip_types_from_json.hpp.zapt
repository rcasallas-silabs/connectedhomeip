/*******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/
#include "app/data-model/NullObject.h"

// Default translation
template <typename T>
std::optional<T> from_json(const nlohmann::json & value)
{
    return std::nullopt;
}
/***************************** Simple types Convertes **************/

template<> inline
std::optional<bool> from_json(const nlohmann::json  & value)
{
    return value;
}

template<> inline
std::optional<int> from_json(const nlohmann::json  & value)
{
    return value;
}

template<> inline
std::optional<std::string> from_json(const nlohmann::json & value)
{
    return value;
}

template <>
inline std::optional<uint8_t> from_json(const nlohmann::json & value)
{
    return value;
}
template <>
inline std::optional<uint16_t> from_json(const nlohmann::json & value)
{
    return value;
}
template <>
inline std::optional<uint32_t> from_json(const nlohmann::json & value)
{
    return value;
}
template <>
inline std::optional<uint64_t> from_json(const nlohmann::json & value)
{
    return value;
}
template <>
inline std::optional<chip::app::DataModel::Nullable<int>> from_json(const nlohmann::json & value)
{
    if (value.is_null())
    {
        return std::nullopt;
    }
    else
    {
        return chip::app::DataModel::Nullable<int>(value);
    }
}
template <>
inline std::optional<chip::app::DataModel::Nullable<uint8_t>> from_json(const nlohmann::json & value)
{
    if (value.is_null())
    {
        return std::nullopt;
    }
    else
    {
        return chip::app::DataModel::Nullable<uint8_t>(value);
    }
}
template <>
inline std::optional<chip::app::DataModel::Nullable<uint16_t>> from_json(const nlohmann::json & value)
{
    if (value.is_null())
    {
        return std::nullopt;
    }
    else
    {
        return chip::app::DataModel::Nullable<uint16_t>(value);
    }
}
template <>
inline std::optional<chip::app::DataModel::Nullable<uint32_t>> from_json(const nlohmann::json & value)
{
    if (value.is_null())
    {
        return std::nullopt;
    }
    else
    {
        return chip::app::DataModel::Nullable<uint32_t>(value);
    }
}
template <>
inline std::optional<chip::app::DataModel::Nullable<uint64_t>> from_json(const nlohmann::json & value)
{
    if (value.is_null())
    {
        return std::nullopt;
    }
    else
    {
        return chip::app::DataModel::Nullable<uint64_t>(value);
    }
}
/***************************** Bitmap Convertes **************/
//{{#zcl_clusters}}
//{{#zcl_bitmaps}}
//template<> inline nlohmann::json to_json(const chip::BitFlags<{{asUpperCamelCase parent.label}}::{{label}}, uint8_t>& value) {
//    return "{\"no bitmap support\"}";
//}

{{/zcl_bitmaps}}

/***************************** Struct Convertes **************/
//{{#zcl_structs}}
//template<> inline nlohmann::json to_json(const {{asUpperCamelCase parent.label}}::Structs::{{name}}::Type& value) {
//    return "no struct support";
//}
//
//{{/zcl_structs}}

{{#zcl_enums}}

template<> inline std::optional<{{asUpperCamelCase parent.label}}::{{label}}> from_json(const nlohmann::json& value) {
    const std::map< std::string, {{asUpperCamelCase parent.label}}::{{label}}> 
        table = {
            {{#zcl_enum_items}}
            { "{{asUpperCamelCase label}}" , {{asUpperCamelCase parent.parent.label}}::{{parent.label}}::k{{asUpperCamelCase label}} },
            {{/zcl_enum_items}}
        };

    auto i  = table.find( value );
    if( i != table.end() ) {
        return i->second;
    } else {
        return std::nullopt;
    }
}

{{/zcl_enums}}

{{/zcl_clusters}}
