
/**
 *  @file
 *    This file contains definitions for accessors around clusters attributes.
 */

#define CHIP_USE_ENUM_CLASS_FOR_IM_ENUM
#include <app-common/zap-generated/attributes/Accessors.h>

#include <app-common/zap-generated/attribute-type.h>
#include <app-common/zap-generated/ids/Attributes.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app/util/af.h>
#include <app/util/attribute-storage-null-handling.h>
#include <app/util/odd-sized-integers.h>
#include <attribute_state_cache.hpp>

using namespace chip::app;
namespace unify {
namespace matter_bridge {

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_attributes_server}}
{{#first}}
namespace {{asUpperCamelCase parent.label}} {
namespace Attributes {

{{/first}}
{{#if_is_struct type}}
{{else if (canHaveSimpleAccessors this)}}
namespace {{asUpperCamelCase label}} {

{{#*inline "clusterId"}}Clusters::{{asUpperCamelCase parent.label}}::Id{{/inline}}
{{#*inline "sizingBytes"}}{{#if (isShortString type)}}1{{else}}2{{/if}}{{/inline}}


EmberAfStatus Get(const chip::app::ConcreteAttributePath& endpoint, {{zapTypeToEncodableClusterObjectType type ns=parent.name forceNotOptional=true}}& value)
{
    attribute_state_cache& cache = attribute_state_cache::get_instance();

    using Traits = NumericAttributeTraits<{{accessorTraitType type}}>;
    Traits::StorageType temp_storage;

    cache.get<Traits::StorageType>(endpoint,temp_storage);    
    auto tmp = Traits::StorageToWorking(temp_storage);

    {{#if isNullable }}
    value.SetNonNull(tmp);
    {{else}}
    value = tmp;
    {{/if}}
    return EMBER_ZCL_STATUS_SUCCESS;    
}

EmberAfStatus Set(const chip::app::ConcreteAttributePath& endpoint, const {{zapTypeToEncodableClusterObjectType type ns=parent.name forceNotOptional=true}}& value)
{
    attribute_state_cache& cache = attribute_state_cache::get_instance();
    {{~#if (isString type)}}
    cache.set<{{accessorTraitType type}}>(endpoint,value);
    {{else}}
    using Traits = NumericAttributeTraits<{{accessorTraitType type}}>;
    Traits::StorageType storageValue;
    {{#if isNullable}}
    if(value.HasValidValue()) {
        Traits::WorkingToStorage(value.Value(), storageValue);
    } else {
        return EMBER_ZCL_STATUS_FAILURE;
    }
    {{else}}
    Traits::WorkingToStorage(value, storageValue);
    {{/if}}
    cache.set(endpoint,storageValue);
    {{/if}}
    return EMBER_ZCL_STATUS_SUCCESS;
}


} // namespace {{asUpperCamelCase label}}

{{/if_is_struct}}
{{#last}}
} // namespace Attributes
} // {{asUpperCamelCase parent.label}}

{{/last}}
{{/zcl_attributes_server}}
{{/if}}
{{/zcl_clusters}}

} // matter_bridge
} // unify
